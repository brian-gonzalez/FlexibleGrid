
/**
 * Flex Grid -
 * Version: 0.3.5
 *
 * Simple grid built with flex box and sass.
 *
 * Matthew Simo - matthew.a.simo@gmail.com
 */

/**
 * Grid setup
 *
 * The grid will calculate dimensions based on these two variables:
 * @fg-columns: [Integer | List of Integers] will inform the grid loops how many columns there should be. Can be set as a list to generate multi-base grids.
 * @fg-gutter:  [String | Map of Strings] will inform the grid loops how big each column's gutters should be. Can be set to a list of gutters per namespace (breakpoint).
 */
@fg-columns: 12;
@fg-gutter: 0.5rem;

/**
 * Break point namespace object
 *
 * Set the default namespace object with these defaults with the
 * understanding that you can pass in whatever you might require for your site.
 *
 * @fg-breakpoints is a Sass list with nested lists inside. Each sub list defines two things.
 * 1. The namespace for that breakpoint. (Required) (i.e. xs, sm, md, lg)
 * 2. The min-width measurement for the breakpoint for that namespace. (i.e. 48em, 62em, 75em)
 *
 * Note: These should be in the proper order (at least till libsass handles map keys properly).
 *
 * Note: If the measurement is left out then it will be skipped when generating
 * the grid and applied to global styles.
 *
 */
@fg-breakpoints: xs, sm 768px, md 992px, lg 1200px;

/**
 * Class Name Defaults
 *
 * Define class names for columns, rows and offsets in case compatibility with other
 * libraries is necessary.
 * @fg-class-grid: [String] used for the grid general classes (i.e. alignment, position, etc.)
 * @fg-class-row: [String] used for the row class
 * @fg-class-col: [String] used for the column class
 * @fg-class-off: [String] used for the offset class
*/
@fg-class-grid: grid;
@fg-class-row: row;
@fg-class-col: col;
@fg-class-off: off;

/**
 * Optional setting to add half a column push
 * @type {[Boolean]}
 */
@fg-use-off-half: false;

/**
 * Spacing mixin to create uniform margin/padding
 */
.spacing( @value; @type: margin; @orientation: horizontal ) {
  & when (@orientation = horizontal) {
    @{type}-left: @value;
    @{type}-right: @value;
  }

  & when not (@orientation = horizontal) {
    @{type}-top: @value;
    @{type}-bottom: @value;
  }
}

/**
 * If there's more than one spacing setting,
 * generates the gutter/spacing per namespace (breakpoint), specific to the namespaced selectors (col-xs, col-lg, etc.).
 */
.conditional-spacing( @namespace; @breakpointIndex: 1 ) {
  & when (length(@fg-gutter) > 1) {
    @nmspGutterGroup: extract(@fg-gutter, @breakpointIndex);
    @nmspGutter: extract(@nmspGutterGroup, 2);

    .@{fg-class-row} {
      .spacing( -@nmspGutter );
    }

    [class*="@{fg-class-col}-@{namespace}"] {
      .spacing( @nmspGutter, padding );
    }
  }
}

/**
 * Row wrapper class, flex box parent.
 */
.@{fg-class-row} {
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;

  & when (length(@fg-gutter) = 1) {
    .spacing( -@fg-gutter );
  }
}

.@{fg-class-grid} {
  &-justify-start {
    justify-content: flex-start;
  }

  &-justify-end {
    justify-content: flex-end;
  }

  &-justify-center {
    justify-content: center;
  }

  &-justify-between {
    justify-content: space-between;
  }

  &-justify-around {
    justify-content: space-around;
  }

  &-align-start {
    align-items: flex-start;
  }

  &-align-end {
    align-items: flex-end;
  }

  &-align-center {
    align-items: center;
  }

  &-align-baseline {
    align-items: baseline;
  }

  &-align-stretch {
    align-items: stretch;
  }

  &-flow-row {
    flex-flow: row;
  }

  &-flow-row-rev {
    flex-flow: row-reverse;
  }

  &-flow-col {
    flex-flow: column;
  }

  &-flow-col-rev {
    flex-flow: column-reverse;
  }

  &-flow-wrap {
    flex-flow: wrap;
  }

  &-flow-wrap-rev {
    flex-flow: wrap-reverse;
  }

  &-direction-row {
    flex-direction: row;
  }

  &-direction-row-rev {
    flex-direction: row-reverse;
  }

  &-direction-col {
    flex-direction: column;
  }

  &-direction-col-rev {
    flex-direction: column-reverse;
  }
}


.col--base {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex-grow: 0;
  flex-shrink: 0;
  min-height: 1px;

  & when (length(@fg-gutter) = 1) {
    .spacing( @fg-gutter, padding );
  }
}

/**
 * Generate a set of grid base selectors with namespaces.
 * ex.: [class*="col-lg"], which selects all elements that contain "col-lg" on their class list.
 * This helps reduce total file size, and avoids a bulky final selector.
 */

.grid-base( @namespace ) {
  [class*="@{fg-class-col}-@{namespace}"] {
    &:extend(.col--base);
  }
}

/**
 * Determines if the grid should generate a single base, or multiple, using the @fg-columns variable.
 */
.grid-sizes-per-base( @namespace; @breakpointIndex ) {
  
  & when (length(@fg-columns) = 1) {
      .grid-sizes( @namespace );
    }

  & when (length(@fg-columns) > 1) {
    .baseLoop(@baseIndex) when (@baseIndex <= length(@fg-columns)) {

      .grid-sizes( @namespace; @breakpointIndex; extract(@fg-columns, @baseIndex) );

      .baseLoop(@baseIndex + 1);
    }

    .baseLoop(1);
  } 

  .@{fg-class-col}-@{namespace} {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }
}

/**
 * Generate a set of grid column classes using a namespace
 *
 * .@{fg-class-col}-[namespace] for intelligent column division
 * .@{fg-class-col}-[namespace]-[number] for a column that covers a specific number of columns (e.g. 1-12 by default)
 * .@{fg-class-off}-[namespace]-[number] for pushing a col a specific number of columns (e.g. 1-11 by default)
 * .@{fg-class-off}-[namespace]-reset for resetting a col's offset for that and larger namespaces
 */

.grid-sizes( @namespace; @breakpointIndex: 1; @column-base: @fg-columns;) {

  .setBaseClass() when (length(@fg-columns) > 1) {
    @baseAppend: @column-base;
  }
  
  .setBaseClass() when (default()) {
    @baseAppend: '';
  }

  .setBaseClass();

  @colClass: ~"@{fg-class-col}-@{namespace}@{baseAppend}";
  @offClass: ~"@{fg-class-off}-@{namespace}@{baseAppend}";

  // Run the loop for as many columns as speficied
  .gridLoop(@i) when (@i <= @column-base) {
    @columnPercentage: percentage(@i / @column-base);

    .@{colClass}-@{i} {
      flex-basis: @columnPercentage;
      max-width:  @columnPercentage;
    }

    // Don't include the .off class for the last column
    & when not ( @i = @column-base ) {
      .@{offClass}-@{i} {
        margin-left: @columnPercentage;
      }

      // Sets up the .off class with an optional -half modifier to allow for half-column size margin increase.
      & when (@fg-use-off-half = true) {

        .getGutterVal() when (length(@fg-gutter) > 1) {
          @gutterGroup: extract(@fg-gutter, @breakpointIndex);
          @fg-gutter-val: extract(@gutterGroup, 2);
        }

        .getGutterVal() when (default()) {
          @fg-gutter-val: @fg-gutter;
        }

        .getGutterVal();

        .@{offClass}-@{i}--half {
          @basePercent: @columnPercentage;
          @secondPercent: percentage(1 / @column-base) / 2;

          margin-left: calc( (@basePercent - @secondPercent) ~"- @{fg-gutter-val}" );
        }
      }
    }

    .gridLoop(@i + 1);
  }

  .gridLoop(1);

  .@{fg-class-off}-@{namespace}-reset {
    margin-left: 0;
  }

}

/**
 * Build the grid in two steps, to help minimize file size
 * Step 1, for each namespace, create the grid-base
 * Step 2, for each namespace, wrap the col width/offset measurements in their breakpoint media query
 */

.loopbreakpoints(@index) when (@index =< length(@fg-breakpoints)) { 

  @currBreakpoint: extract(@fg-breakpoints, @index);
  @namespace: extract(@currBreakpoint, 1);

  .grid-base(@namespace);

  //Step 2
  & when (length(@currBreakpoint) = 1) {
    .conditional-spacing(@namespace; @index);
    .grid-sizes-per-base(@namespace; @index);
  }
  
  & when (length(@currBreakpoint) > 1) {
    @size: extract(@currBreakpoint, 2);
    
    @media only screen and (min-width: @size) {
      .conditional-spacing(@namespace; @index);
      .grid-sizes-per-base(@namespace; @index);
    }
  }

  .loopbreakpoints((@index + 1));
}

.loopbreakpoints(1);
