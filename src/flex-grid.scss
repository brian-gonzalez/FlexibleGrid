
/**
 * Flex Grid -
 * Version: 0.3.5
 *
 * Simple grid built with flex box and sass.
 *
 * Matthew Simo - matthew.a.simo@gmail.com
 */

/**
 * Grid setup
 *
 * The grid will calculate dimensions based on these two variables:
 * $fg-columns: [Integer | List of Integers] will inform the grid loops how many columns there should be. Can be set as a list to generate multi-base grids.
 * $fg-gutter:  [String | Map of Strings] will inform the grid loops how big each column's gutters should be. Can be set to a list of gutters per namespace (breakpoint).
 */
$fg-columns: 12 !default;
$fg-gutter: .5rem !default;

/**
 * Break point namespace object
 *
 * Set the default namespace object with these defaults with the
 * understanding that you can pass in whatever you might require for your site.
 *
 * $fg-breakpoints is a Sass list with nested lists inside. Each sub list defines two things.
 * 1. The namespace for that breakpoint. (Required) (i.e. xs, sm, md, lg)
 * 2. The min-width measurement for the breakpoint for that namespace. (i.e. 48em, 62em, 75em)
 *
 * Note: These should be in the proper order (at least till libsass handles map keys properly).
 *
 * Note: If the measurement is left out then it will be skipped when generating
 * the grid and applied to global styles.
 *
 */
$fg-breakpoints: (
  xs: 0,
  sm: 480px,
  md: 768px,
  lg: 1200px
) !default;

/**
 * Class Name Defaults
 *
 * Define class names for columns, rows and offsets in case compatibility with other
 * libraries is necessary.
 * $fg-class-grid: [String] used for the grid general classes (i.e. alignment, position, etc.)
 * $fg-class-row: [String] used for the row class
 * $fg-class-col: [String] used for the column class
 * $fg-class-off: [String] used for the offset class
*/
$fg-class-grid: 'grid' !default;
$fg-class-row:  'row' !default;
$fg-class-col:  'col' !default;
$fg-class-off:  'off' !default;

/**
 * Optional setting to add half a column push
 * @type {[Boolean]}
 */
$fg-use-off-half: false !default;

/**
 * Calculate column size percentage
 */
@function get-col-percent($column-num, $column-base: $fg-columns) {

  @return $column-num / $column-base * 100%;

}

/**
 * Spacing mixin to create uniform margin/padding
 */
@mixin spacing( $value, $type: margin, $orientation: horizontal ) {
  @if $orientation == horizontal {
    #{ $type }-left: $value;
    #{ $type }-right: $value;
  }

  @else {
    #{ $type }-top: $value;
    #{ $type }-bottom: $value;
  }
}

/**
 * If there's more than one spacing setting,
 * generates the gutter/spacing per namespace (breakpoint), specific to the namespaced selectors (col-xs, col-lg, etc.).
 */
@mixin conditional-spacing($namespace) {
  @if length($fg-gutter) > 1 {
    $namespacedGutter: map-get($fg-gutter, #{$namespace});

    @if $namespacedGutter {
      .#{$fg-class-row}:not(.#{$fg-class-grid}-no-gutters) {
        @include spacing( -$namespacedGutter );
      }

      .#{$fg-class-col},
      [class*="#{$fg-class-col}-"] {
        @include spacing($namespacedGutter, padding);
      }
    }
  }
}

/**
 * Row wrapper class, flex box parent.
 */
.#{$fg-class-row} {
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;

  @if length($fg-gutter) == 1 {
    @include spacing( -$fg-gutter );
  }
}

%#{$fg-class-col} {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex-grow: 0;
  flex-shrink: 0;
  min-height: 1px;

  @if length($fg-gutter) == 1 {
    @include spacing( $fg-gutter, padding );
  }
}

.#{$fg-class-grid} {
  &-justify-start {
    justify-content: flex-start;
  }

  &-justify-end {
    justify-content: flex-end;
  }

  &-justify-center {
    justify-content: center;
  }

  &-justify-between {
    justify-content: space-between;
  }

  &-justify-around {
    justify-content: space-around;
  }

  &-align-start {
    align-items: flex-start;
  }

  &-align-end {
    align-items: flex-end;
  }

  &-align-center {
    align-items: center;
  }

  &-align-baseline {
    align-items: baseline;
  }

  &-align-stretch {
    align-items: stretch;
  }

  &-flow-row {
    flex-flow: row;
  }

  &-flow-row-rev {
    flex-flow: row-reverse;
  }

  &-flow-col {
    flex-flow: column;
  }

  &-flow-col-rev {
    flex-flow: column-reverse;
  }

  &-flow-wrap {
    flex-flow: wrap;
  }

  &-flow-wrap-rev {
    flex-flow: wrap-reverse;
  }

  &-direction-row {
    flex-direction: row;
  }

  &-direction-row-rev {
    flex-direction: row-reverse;
  }

  &-direction-col {
    flex-direction: column;
  }

  &-direction-col-rev {
    flex-direction: column-reverse;
  }
  
  &-no-gutters {
    margin-left: 0;
    margin-right: 0;
    
    > .#{$fg-class-col},
    > [class*="#{$fg-class-col}-"] {
      padding-left: 0;
      padding-right: 0;
    }
  }
}

/**
 * Generate a set of grid base selectors for col-.
 * ex.: [class*="col-"], which selects all elements that contain "col-" on their class list.
 * This helps reduce total file size, and avoids a bulky final selector.
 */

@mixin grid-base($isDefault: false) {
  [class^="#{$fg-class-col}-"],
  [class*=" #{$fg-class-col}-"] {
    @extend %#{$fg-class-col};
  }
  
  @if ($isDefault) {
    .#{$fg-class-col} {
      @extend %#{$fg-class-col};
    }
  }
}

/**
 * Determines if the grid should generate a single base, or multiple, using the $fg-columns variable.
 */
@mixin grid-sizes-per-base($namespace, $isDefault: false) {
  @if length($fg-columns) == 1 {
      @include grid-sizes($namespace: $namespace, $isDefault: $isDefault);
  }

  @else {
    @each $column-base in $fg-columns {
      @include grid-sizes($namespace, $column-base, $isDefault);
    }
  }
  
  $colClassPrefix: if($isDefault, $fg-class-col, #{$fg-class-col + '-' + $namespace});

  .#{$colClassPrefix} {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }
}

/**
 * Generate a set of grid column classes using a namespace
 *
 * .#{ $fg-class-col }-[namespace] for intelligent column division
 * .#{ $fg-class-col }-[namespace]-[number] for a column that covers a specific number of columns (e.g. 1-12 by default)
 * .#{ $fg-class-off }-[namespace]-[number] for pushing a col a specific number of columns (e.g. 1-11 by default)
 * .#{ $fg-class-off }-[namespace]-reset for resetting a col's offset for that and larger namespaces
 */

@mixin grid-sizes( $namespace, $column-base: $fg-columns, $isDefault: false ) {

  $baseAppend: '';

  @if length($fg-columns) > 1 {
    $baseAppend: #{'-' + $column-base};
  }

  $colClassPrefix: if($isDefault, #{$fg-class-col}, #{ $fg-class-col + '-' + $namespace});
  $offClassPrefix: if($isDefault, #{$fg-class-off}, #{ $fg-class-off + '-' + $namespace});

  $colClass: #{$colClassPrefix + $baseAppend};
  $offClass: #{$offClassPrefix + $baseAppend};

  // Run the loop for as many columns as speficied
  @for $i from 1 through $column-base {
    .#{ $colClass }-#{$i} {
      flex-basis: get-col-percent($i, $column-base);
      max-width:  get-col-percent($i, $column-base);
    }

    // Don't include the .off class for the last column
    @if ( $i != $column-base ) {
      .#{ $offClass }-#{$i} {
        margin-left: get-col-percent($i, $column-base);
      }

      //Sets up the .off class with an optional -half modifier to allow for half-column size margin increase.
      @if $fg-use-off-half {

        $fg-gutter-val: $fg-gutter;

        @if length($fg-gutter) > 1 {
         $fg-gutter-val: map-get($fg-gutter, #{$namespace});
        }

        .#{ $offClass }-#{$i}--half {
          margin-left: calc(#{get-col-percent($i, $column-base)} - #{(get-col-percent(1, $column-base) / 2)} - #{$fg-gutter-val} );
        }
      }
    }
  }

  .#{$offClassPrefix}-reset {
    margin-left: 0;
  }

}

/**
 * Build the grid in two steps, to help minimize file size
 * Step 1, for each namespace, create the grid-base
 * Step 2, for each namespace, wrap the col width/offset measurements in their breakpoint media query
 */

@each $namespace, $size in $fg-breakpoints {
  @if $size == 0 or $size == '' {
    //Step 1
    @include grid-base(true);
    
    //Step 2
    @include conditional-spacing($namespace);
    @include grid-sizes-per-base($namespace, true);
  }

  @else {
    //Step 1
    @include grid-base();
    
    //Step 2
    @media only screen and (min-width: #{$size}) {
      @include conditional-spacing($namespace);
      @include grid-sizes-per-base($namespace);
    }
  }
}
